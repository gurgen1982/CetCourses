//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CetCources.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class dbEntities : DbContext
    {
        public dbEntities()
            : base("name=dbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Child> Children { get; set; }
        public virtual DbSet<CourseFrequency> CourseFrequencies { get; set; }
        public virtual DbSet<FreeHour> FreeHours { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<YearGroup> YearGroups { get; set; }
        public virtual DbSet<DayOfWeek> DayOfWeeks { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<YearGroupDay> YearGroupDays { get; set; }
        public virtual DbSet<BaseHours> BaseHours { get; set; }
        public virtual DbSet<DayHours> DayHours { get; set; }
        public virtual DbSet<HourShifts> HourShifts { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<qExportData> qExportDatas { get; set; }
    
        public virtual int ExportData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ExportData");
        }
    
        [DbFunction("dbEntities", "MatchingChildrenByHours")]
        public virtual IQueryable<MatchingChildrenByHours_Result> MatchingChildrenByHours(Nullable<int> yearid, Nullable<int> freqid, Nullable<int> edulevel, Nullable<double> sunday, Nullable<double> monday, Nullable<double> tuesday, Nullable<double> wednesday, Nullable<double> thursday, Nullable<double> friday, Nullable<double> saturday)
        {
            var yearidParameter = yearid.HasValue ?
                new ObjectParameter("yearid", yearid) :
                new ObjectParameter("yearid", typeof(int));
    
            var freqidParameter = freqid.HasValue ?
                new ObjectParameter("freqid", freqid) :
                new ObjectParameter("freqid", typeof(int));
    
            var edulevelParameter = edulevel.HasValue ?
                new ObjectParameter("edulevel", edulevel) :
                new ObjectParameter("edulevel", typeof(int));
    
            var sundayParameter = sunday.HasValue ?
                new ObjectParameter("sunday", sunday) :
                new ObjectParameter("sunday", typeof(double));
    
            var mondayParameter = monday.HasValue ?
                new ObjectParameter("monday", monday) :
                new ObjectParameter("monday", typeof(double));
    
            var tuesdayParameter = tuesday.HasValue ?
                new ObjectParameter("tuesday", tuesday) :
                new ObjectParameter("tuesday", typeof(double));
    
            var wednesdayParameter = wednesday.HasValue ?
                new ObjectParameter("wednesday", wednesday) :
                new ObjectParameter("wednesday", typeof(double));
    
            var thursdayParameter = thursday.HasValue ?
                new ObjectParameter("thursday", thursday) :
                new ObjectParameter("thursday", typeof(double));
    
            var fridayParameter = friday.HasValue ?
                new ObjectParameter("friday", friday) :
                new ObjectParameter("friday", typeof(double));
    
            var saturdayParameter = saturday.HasValue ?
                new ObjectParameter("saturday", saturday) :
                new ObjectParameter("saturday", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<MatchingChildrenByHours_Result>("[dbEntities].[MatchingChildrenByHours](@yearid, @freqid, @edulevel, @sunday, @monday, @tuesday, @wednesday, @thursday, @friday, @saturday)", yearidParameter, freqidParameter, edulevelParameter, sundayParameter, mondayParameter, tuesdayParameter, wednesdayParameter, thursdayParameter, fridayParameter, saturdayParameter);
        }
    
        [DbFunction("dbEntities", "ChildDayHours")]
        public virtual IQueryable<ChildDayHours_Result> ChildDayHours(Nullable<int> childid)
        {
            var childidParameter = childid.HasValue ?
                new ObjectParameter("childid", childid) :
                new ObjectParameter("childid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<ChildDayHours_Result>("[dbEntities].[ChildDayHours](@childid)", childidParameter);
        }
    }
}
